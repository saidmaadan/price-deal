{"version":3,"file":"static/webpack/static/development/pages/_app.js.fb3fea4aaa028671201b.hot-update.js","sources":["webpack:///./components/PaymentProcessing.js"],"sourcesContent":["import React, { Component } from 'react'\nimport StripeCheckout from 'react-stripe-checkout';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport NProgress from 'nprogress';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport Error from './ErrorMessage';\nimport User, { CURRENT_USER_QUERY } from './User';\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation createOrder($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      products {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalProducts(cart) {\n    return cart.reduce((tally, cartProduct) => tally + cartProduct.quantity, 0);\n  }\n  \nclass PaymentProcessing extends Component {\n    onToken = async (res, createOrder) => {\n        console.log('On Token');\n        console.log(res.id);\n        NProgress.start();\n        // manually call the mutation once we have the stripe token\n        const order = await createOrder({\n            variables: {\n                token: res.id,\n            },\n        }).catch(err => {\n            alert(err.message);\n        });\n        Router.push({\n            pathname: '/order',\n            query: { id: order.data.createOrder.id },\n        });\n    };\n  render() {\n      return (\n          <User>\n              {({ data: { me }, loading }) => (\n                  <Mutation\n                    mutation={CREATE_ORDER_MUTATION}\n                    refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n                  >\n                    {createOrder => (\n                    <StripeCheckout\n                        amount={calcTotalPrice(me.cart)}\n                        name=\"Price Deals\"\n                        description={`Order of ${totalProducts(me.cart)} Products`}\n                        image={me.cart[0].product && me.cart[0].product.image}\n                        stripeKey=\"pk_test_xaGcexh6613z9GmfH5kvDMXy\"\n                        currency=\"USD\"\n                        email={me.email}\n                        token={res => this.onToken(res, createOrder)}       \n                    >\n                        {this.props.children}\n                          </StripeCheckout>\n                    )}\n                </Mutation>\n              )}\n          </User>\n    )\n  }\n}\nexport default PaymentProcessing;\nexport { CREATE_ORDER_MUTATION };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAMA;AACA;AADA;AADA;AAKA;AACA;AACA;AAZA;AAKA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAgBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AALA;AAuBA;;;;AA5CA;AACA;AA6CA;;;;;A","sourceRoot":""}